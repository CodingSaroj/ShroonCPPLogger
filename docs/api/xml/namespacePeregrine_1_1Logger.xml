<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacePeregrine_1_1Logger" kind="namespace" language="C++">
    <compoundname>Peregrine::Logger</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacePeregrine_1_1Logger_1a7807980a583b25ca9842144e5653405e" prot="public" static="yes" mutable="no">
        <type>std::ostream *</type>
        <definition>std::ostream* Peregrine::Logger::s_Out</definition>
        <argsstring></argsstring>
        <name>s_Out</name>
        <initializer>= &amp;std::cout</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.cpp" line="31" column="30" bodyfile="src/Logger.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacePeregrine_1_1Logger_1a19311159e53bf6236f0baf0d1b5cf979" prot="public" static="yes" mutable="no">
        <type>const double</type>
        <definition>const double Peregrine::Logger::s_StartTime</definition>
        <argsstring></argsstring>
        <name>s_StartTime</name>
        <initializer>= std::chrono::system_clock::now().time_since_epoch().count() / 1000000.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.cpp" line="33" column="29" bodyfile="src/Logger.cpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacePeregrine_1_1Logger_1a23fccd37b55945e0c94f78722121c7e1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string Peregrine::Logger::GetTimestamp</definition>
        <argsstring>()</argsstring>
        <name>GetTimestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.cpp" line="54" column="28" bodyfile="src/Logger.cpp" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacePeregrine_1_1Logger_1a56fdad18de42922ddac917e53df7eb13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Peregrine::Logger::SetOStream</definition>
        <argsstring>(std::ostream &amp;out)</argsstring>
        <name>SetOStream</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Sets the <computeroutput>std::ostream</computeroutput> to log to. It is <computeroutput>std::cout</computeroutput> by default for info, warnings and errors. Assertions are always written to <computeroutput>std::cerr</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::ostream &amp;</computeroutput> to which, all the logs will be written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.cpp" line="61" column="14" bodyfile="src/Logger.cpp" bodystart="61" bodyend="64" declfile="src/Logger.hpp" declline="168" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__LoggingFunctions_1ga7cfaed2952f6130399ae6b51e3f28cef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Peregrine::Logger::LogInfo</definition>
        <argsstring>(const std::string &amp;section, const std::string &amp;log)</argsstring>
        <name>LogInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>log</declname>
        </param>
        <briefdescription>
<para>Logs data with level <computeroutput>Info</computeroutput> to the output stream in the format:<linebreak/>
<blockquote><para><computeroutput>(Green)[&lt;time_since_app_started_in_ms&gt;](Bold|Cyan)Info(White)::&lt;section&gt;: &lt;log&gt;\n</computeroutput>. </para>
</blockquote></para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>section</parametername>
</parameternamelist>
<parameterdescription>
<para>The section from where the log is comming. Example - &quot;Renderer::Rasterizer&quot;, &quot;Parser&quot; etc. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.cpp" line="66" column="14" bodyfile="src/Logger.cpp" bodystart="66" bodyend="78" declfile="src/Logger.hpp" declline="183" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__LoggingFunctions_1ga46d69303d4560d7adf123a03d379955c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Peregrine::Logger::LogWarning</definition>
        <argsstring>(const std::string &amp;section, const std::string &amp;log)</argsstring>
        <name>LogWarning</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>log</declname>
        </param>
        <briefdescription>
<para>Logs data with level <computeroutput>Warning</computeroutput> to the output stream in the format:<linebreak/>
<blockquote><para><computeroutput>(Green)[&lt;time_since_app_started_in_ms&gt;](Bold|Yellow)Warning(White)::&lt;section&gt;: &lt;log&gt;\n</computeroutput>. </para>
</blockquote></para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>section</parametername>
</parameternamelist>
<parameterdescription>
<para>The section from where the log is comming. Example - &quot;Renderer::Rasterizer&quot;, &quot;Parser&quot; etc. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.cpp" line="80" column="14" bodyfile="src/Logger.cpp" bodystart="80" bodyend="92" declfile="src/Logger.hpp" declline="192" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__LoggingFunctions_1ga244d749906d71894884e172962ade386" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Peregrine::Logger::LogError</definition>
        <argsstring>(const std::string &amp;section, const std::string &amp;log)</argsstring>
        <name>LogError</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>log</declname>
        </param>
        <briefdescription>
<para>Logs data with level <computeroutput>Error</computeroutput> to the output stream in the format:<linebreak/>
<blockquote><para><computeroutput>(Green)[&lt;time_since_app_started_in_ms&gt;](Bold|Red)Error(White)::&lt;section&gt;: &lt;log&gt;\n</computeroutput>. </para>
</blockquote></para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>section</parametername>
</parameternamelist>
<parameterdescription>
<para>The section from where the log is comming. Example - &quot;Renderer::Rasterizer&quot;, &quot;Parser&quot; etc. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.cpp" line="94" column="14" bodyfile="src/Logger.cpp" bodystart="94" bodyend="106" declfile="src/Logger.hpp" declline="201" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__LoggingFunctions_1ga242442cc88876c549d61caf9ebe44667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Peregrine::Logger::LogFatalError</definition>
        <argsstring>(const std::string &amp;section, const std::string &amp;log)</argsstring>
        <name>LogFatalError</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>section</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>log</declname>
        </param>
        <briefdescription>
<para>Logs data with level <computeroutput>Error</computeroutput> to the output stream in the format:<linebreak/>
<blockquote><para><computeroutput>(Green)[&lt;time_since_app_started_in_ms&gt;](Bold|Red)Error(White)::&lt;section&gt;: &lt;log&gt;\n</computeroutput><linebreak/>
</para>
</blockquote>and performs a <computeroutput><ref refid="Logger_8hpp_1a70c06aa50dcd152a64b5cdcc66e7bf5b" kindref="member">PG_DEBUG_BREAK()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>section</parametername>
</parameternamelist>
<parameterdescription>
<para>The section from where the log is comming. Example - &quot;Renderer::Rasterizer&quot;, &quot;Parser&quot; etc. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>The content of the log. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.cpp" line="108" column="14" bodyfile="src/Logger.cpp" bodystart="108" bodyend="120" declfile="src/Logger.hpp" declline="211" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1ga4746aa5b425063c44c95a435a2bbe29b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Peregrine::Logger::FormatBase</definition>
        <argsstring>(const std::string &amp;format, std::initializer_list&lt; std::string &gt; args)</argsstring>
        <name>FormatBase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; std::string &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Outputs a string with all the &quot;{}&quot; replaced with each element in <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>const std::string &amp;</computeroutput> which needs to be formatted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::initializer_list</computeroutput> containing format args.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with each element in <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.cpp" line="22" column="21" bodyfile="src/StringFormat.cpp" bodystart="22" bodyend="25" declfile="src/StringFormat.hpp" declline="49" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1gaf78092eebcc118b1222846b85d4511ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string Peregrine::Logger::FormatBase</definition>
        <argsstring>(std::string &amp;&amp;format, std::initializer_list&lt; std::string &gt; args)</argsstring>
        <name>FormatBase</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; std::string &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Outputs an <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with each element in <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::string &amp;&amp;</computeroutput> which needs to be formatted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::initializer_list</computeroutput> containing format args.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with each element in <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.cpp" line="27" column="21" bodyfile="src/StringFormat.cpp" bodystart="27" bodyend="212" declfile="src/StringFormat.hpp" declline="59" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1gaba96d5b0d14029f0d9d6688a1391ec7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>IOSFlagTypes</declname>
            <defname>IOSFlagTypes</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Peregrine::Logger::ToString</definition>
        <argsstring>(const Type &amp;t, IOSFlagTypes... flags)</argsstring>
        <name>ToString</name>
        <param>
          <type>const Type &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>IOSFlagTypes...</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Converts variable of type <computeroutput>Type</computeroutput> to <computeroutput>std::string</computeroutput> using <computeroutput>operator&lt;&lt;</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of variable which will be converted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>IOSFlagTypes</parametername>
</parameternamelist>
<parameterdescription>
<para>A parameter pack of types of functors which will be passed to <computeroutput>operator&lt;&lt;</computeroutput>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable to convert to string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to pass to stream before variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::string</computeroutput> version of variable according to the <computeroutput>operator&lt;&lt;</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.hpp" line="73" column="28" bodyfile="src/StringFormat.hpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1ga9ac577b41cb7c2f48a9d1c910a9d9f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Peregrine::Logger::Format</definition>
        <argsstring>(const std::string &amp;format, Args... args)</argsstring>
        <name>Format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Outputs a string with all the &quot;{}&quot; replaced with positional <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>- An <computeroutput>std::string</computeroutput> which needs to be formatted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Argument pack of variables containing format args.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>- An <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.hpp" line="90" column="21" bodyfile="src/StringFormat.hpp" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="group__FormatFunctions_1gac491104914ee0709ddb89714db3df1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string Peregrine::Logger::Format</definition>
        <argsstring>(std::string &amp;&amp;format, Args... args)</argsstring>
        <name>Format</name>
        <param>
          <type>std::string &amp;&amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Outputs a string with all the &quot;{}&quot; replaced with positional <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>An <computeroutput>std::tring</computeroutput> which needs to be formatted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument pack of variables containing format args.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>std::string</computeroutput> with all the &quot;{}&quot; replaced with <computeroutput>args</computeroutput> inside <computeroutput>format</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/StringFormat.hpp" line="107" column="21" bodyfile="src/StringFormat.hpp" bodystart="107" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The namespace in which all the PeregrineCPPLogger API other than macros exists. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/Logger.cpp" line="25" column="1"/>
  </compounddef>
</doxygen>
